const express = require("express");
const mongoose = require("mongoose");
const http = require("http");
const path = require("path");
const cors = require("cors");
const Question = require("./models/Question");
const Player = require("./models/Player");
const PORT = 3000;
const app = express();
const socketIo = require("socket.io");

const server = http.createServer(app);
const io = socketIo(server);

let correctAnswers = []; // –î“±—Ä—ã—Å –∂–∞—É–∞–ø –±–µ—Ä–≥–µ–Ω–¥–µ—Ä–¥—ñ“£ —Ç—ñ–∑—ñ–º—ñ (playerId + timestamp)
const playerSockets = new Map(); // playerId ‚Üí socketId –±–∞–π–ª–∞–Ω—ã—Å—ã

let players = []; // –ñ–∞–¥—Ç–∞“ì—ã –æ–π—ã–Ω—à—ã–ª–∞—Ä —Ç—ñ–∑—ñ–º—ñ

// Static —Ñ–∞–π–ª–¥–∞—Ä–¥—ã –±–µ—Ä—É (frontend HTML, CSS, JS)
app.use(express.static(path.join(__dirname, "../public")));

app.use(
  cors({
    origin: "*", // –Ω–µ–º–µ—Å–µ –Ω–∞“õ—Ç—ã –¥–æ–º–µ–Ω
    credentials: true,
  })
);

// ----------------------

// MongoDB “õ–æ—Å—ã–ª—É
mongoose
  .connect(
    "mongodb+srv://chidorykz:qwerty123@quizdb.canw8yf.mongodb.net/quizdb?retryWrites=true&w=majority&appName=quizdb"
  )
  .then(async () => {
    console.log("‚úÖ MongoDB-–≥–µ “õ–æ—Å—ã–ª–¥—ã");
    server.listen(PORT, () => {
      console.log(
        `üöÄ –°–µ—Ä–≤–µ—Ä http://localhost:${PORT} –ø–æ—Ä—Ç—ã–Ω–¥–∞ –∂“±–º—ã—Å —ñ—Å—Ç–µ–ø —Ç“±—Ä`
      );
    });
  })
  .catch((err) => console.error("‚ùå MongoDB “õ–∞—Ç–µ:", err));

app.get("/top10", async (req, res) => {
  try {
    const topPlayers = await Player.find().sort({ score: -1 }).limit(10);
    res.json(topPlayers);
  } catch (error) {
    res.status(500).json({ error: "–°–µ—Ä–≤–µ—Ä “õ–∞—Ç–µ—Å—ñ" });
  }
});

app.post("/join", async (req, res) => {
  const { nickname } = req.body;

  const newPlayer = new Player({ nickname, score: 0 });
  await newPlayer.save();

  res.json({
    playerId: newPlayer._id,
    nickname: newPlayer.nickname,
  });
});

app.get("/my-rank/:id", async (req, res) => {
  try {
    const { id } = req.params;
    const players = await Player.find().sort({ score: -1 });

    const index = players.findIndex((p) => p._id.toString() === id);

    if (index !== -1) {
      res.json({ rank: index + 1 });
    } else {
      res.status(404).json({ error: "Player not found" });
    }
  } catch (error) {
    res.status(500).json({ error: "–°–µ—Ä–≤–µ—Ä “õ–∞—Ç–µ—Å—ñ" });
  }
});

app.get("/api/player/:id", async (req, res) => {
  const playerId = req.params.id;
  const player = await Player.findById(playerId);
  if (!player) return res.status(404).json({ error: "Player not found" });
  res.json(player);
});

// –û–π—ã–Ω –∫“Ø–π—ñ
let gameActive = false;
let currentQuestions = [];
let currentQuestionIndex = 0;

//--------- Socket –ª–æ–≥–∏–∫–∞—Å—ã -------------

io.on("connection", (socket) => {
  socket.emit("message", "–°—ñ–∑ —Å–µ—Ä–≤–µ—Ä–º–µ–Ω —Å”ô—Ç—Ç—ñ “õ–æ—Å—ã–ª–¥—ã“£—ã–∑!");
  console.log("üîå “ö–∞—Ç—ã—Å—É—à—ã “õ–æ—Å—ã–ª–¥—ã:", socket.id);

  //----------- check --------------------

  // socket.on("answer", (data) => {
  //   console.log("üì® Answer received:", data.nickname);
  //   socket.emit("answer-received", { success: true });
  // });

  // ------- join ------------

  socket.on("join_game", async ({ nickname, promoCode }) => {
    if (!gameActive) {
      socket.emit("game_not_started");
      return;
    }

    if (promoCode !== "1952") {
      socket.emit("invalid_promo");
      return;
    }

    // ‚úÖ –ë—ñ—Ä —Å–µ—Å—Å–∏—è —ñ—à—ñ–Ω–¥–µ “ì–∞–Ω–∞ –±—ñ—Ä–µ–≥–µ–π –±–æ–ª—É “Ø—à—ñ–Ω
    const duplicateInMemory = players.find((p) => p.nickname === nickname);
    if (duplicateInMemory) {
      socket.emit("nickname_taken");
      return;
    }

    // ‚úÖ –ï—Å–∫—ñ –æ–π—ã–Ω—à—ã–ª–∞—Ä–¥–∞–Ω —Ç–∞–∑–∞—Ä—Ç—É (–µ—Å–∫—ñ –º”ô–ª—ñ–º–µ—Ç—Ç–µ—Ä –±–∞–∑–∞–¥–∞ “õ–∞–ª—É—ã –º“Ø–º–∫—ñ–Ω)
    let player = await Player.findOne({ nickname });
    if (!player) {
      player = new Player({
        nickname,
        score: 0,
        socketId: socket.id,
      });
      await player.save();
      console.log(`‚úÖ –ñ–∞“£–∞ –æ–π—ã–Ω—à—ã “õ–æ—Å—ã–ª–¥—ã: ${nickname}`);
    } else {
      // –ú“±–Ω–¥–∞ –µ—Å–∫—ñ –æ–π—ã–Ω—à—ã “õ–∞–π—Ç–∞ “õ–æ—Å—ã–ª—ã–ø –∂–∞—Ç—Å–∞ ‚Äî —Ç–µ–∫ –æ–π—ã–Ω –±–µ–ª—Å–µ–Ω–¥—ñ –±–æ–ª—Å–∞ “ì–∞–Ω–∞
      player.socketId = socket.id;
      await player.save();
      console.log(`‚ôªÔ∏è “ö–∞–π—Ç–∞ “õ–æ—Å—ã–ª“ì–∞–Ω –æ–π—ã–Ω—à—ã: ${nickname}`);
      console.log(player.socketId);
    }

    players.push({ id: socket.id, nickname });
    io.emit("update_player_count", players.length);

    socket.emit("join_success", {
      playerId: player._id,
      nickname: player.nickname,
    });

    playerSockets.set(player._id.toString(), socket.id);
  });

  // --------------------------------

  socket.on("reconnect_player", async ({ playerId, nickname }) => {
    const player = await Player.findById(playerId);
    if (player) {
      player.socketId = socket.id;
      await player.save();
      console.log(`üîÑ –û–π—ã–Ω—à—ã “õ–∞–π—Ç–∞ “õ–æ—Å—ã–ª–¥—ã (quiz.html): ${nickname}`);
      console.log(player.socketId);

      // –ï–≥–µ—Ä disconnect –∫–µ–∑—ñ–Ω–¥–µ players –º–∞—Å—Å–∏–≤—ñ–Ω–µ–Ω –∞–ª—ã–Ω—ã–ø —Ç–∞—Å—Ç–∞–ª—Å–∞ ‚Äî “õ–∞–π—Ç–∞ “õ–æ—Å—É:
      const exists = players.find((p) => p.id === socket.id);
      if (!exists) {
        players.push({ id: socket.id, nickname });
        io.emit("update_player_count", players.length);
      }
    }
  });

  // --------------------------------

  socket.on(
    "submit_answer",
    async ({ playerId, selectedIndex, questionNumber }) => {
      console.log("üì© –ñ–∞—É–∞–ø “õ–∞–±—ã–ª–¥–∞–Ω–¥—ã:", {
        playerId,
        selectedIndex,
        questionNumber,
      });

      const number = Number(questionNumber) + 1;

      if (isNaN(number)) {
        console.error("‚ùå questionNumber is not a number:", questionNumber);
        return;
      }

      const currentQuestion = await Question.findOne({
        question_number: number,
      });
      if (!currentQuestion) return;

      const isCorrect = selectedIndex === currentQuestion.correctIndex;

      const player = players.find((p) => p.id === socket.id);
      if (!player) return;

      const alreadyAnswered = correctAnswers.some(
        (p) => p.playerId === playerId
      );
      if (alreadyAnswered) return;

      if (isCorrect) {
        correctAnswers.push({
          playerId,
          nickname: player.nickname,
          timestamp: Date.now(),
        });
      }
    }
  );

  // -------------------------------

  socket.on("create_game", async () => {
    await Player.deleteMany();
    console.log("üßπ –ï—Å–∫—ñ –æ–π—ã–Ω—à—ã–ª–∞—Ä —Ç–∞–∑–∞–ª–∞–Ω–¥—ã");
    gameActive = true;
    players = [];
    currentQuestions = [];
    currentQuestionIndex = 0;
    io.emit("update_player_count", 0);
    console.log("üéÆ –ñ–∞“£–∞ –æ–π—ã–Ω “õ“±—Ä—ã–ª–¥—ã");
  });

  socket.on("start_game", async () => {
    currentQuestions = await Question.find().sort({ question_number: 1 });
    // console.log("üì¶ –°“±—Ä–∞“õ—Ç–∞—Ä:", currentQuestions);
    currentQuestionIndex = 0;
    io.emit("game_started");

    setTimeout(() => {
      sendCurrentQuestion();
    }, 2000);
  });

  function sendCurrentQuestion() {
    const q = currentQuestions[currentQuestionIndex];
    // console.log("üì§ –°“±—Ä–∞“õ –∂—ñ–±–µ—Ä—ñ–ª–¥—ñ:", q);
    io.emit("question_quiz", {
      text: q.text,
      answers: q.options,
      correctIndex: q.correctIndex,
      number: currentQuestionIndex + 1,
      motivation: q.motivation,
    });
  }

  socket.on("end_game", () => {
    gameActive = false;
    players = [];
    io.emit("update_player_count", 0);
    console.log("üèÅ –û–π—ã–Ω –∞—è“õ—Ç–∞–ª–¥—ã");
  });

  socket.on("disconnect", () => {
    const index = players.findIndex((p) => p.id === socket.id);
    if (index !== -1) {
      const nickname = players[index].nickname;
      players.splice(index, 1);
      console.log(`‚ùå “ö–∞—Ç—ã—Å—É—à—ã —à—ã“õ—Ç—ã: ${nickname}`);
      io.emit("update_player_count", players.length);
    }
  });

  socket.on("show_motivation", () => {
    // –ë–∞—Ä–ª—ã“õ “õ–∞—Ç—ã—Å—É—à—ã–ª–∞—Ä“ì–∞ –∂—ñ–±–µ—Ä–µ–º—ñ–∑
    socket.broadcast.emit("show_motivation");
  });

  //----------- next question -------------------

  socket.on("next_question", async () => {
    console.log("‚úÖ –î“±—Ä—ã—Å –∂–∞—É–∞–ø –±–µ—Ä–≥–µ–Ω–¥–µ—Ä:", correctAnswers);

    correctAnswers.sort((a, b) => a.timestamp - b.timestamp);
    let baseScore = 5000; // üü¢ –î”ô–ª –æ—Å—ã –∂–æ–ª 5000-–¥—ã –±–∞—Å—Ç–∞–ø“õ—ã “±–ø–∞–π —Ä–µ—Ç—ñ–Ω–¥–µ “õ–æ—è–¥—ã

    for (let i = 0; i < correctAnswers.length; i++) {
      const { playerId, nickname } = correctAnswers[i];
      const scoreToAdd = baseScore - i * 3;

      await Player.findByIdAndUpdate(playerId, { $inc: { score: scoreToAdd } });

      console.log(`‚úÖ ${nickname} (${playerId}) “±–ø–∞–π –∞–ª–¥—ã: ${scoreToAdd}`);

      const socketId = playerSockets.get(playerId);
      if (socketId) {
        io.to(socketId).emit("score_update", { added: scoreToAdd });
      }
    }

    correctAnswers = [];

    currentQuestionIndex++;
    if (currentQuestionIndex < currentQuestions.length) {
      const q = currentQuestions[currentQuestionIndex];
      console.log("üì§ –ö–µ–ª–µ—Å—ñ —Å“±—Ä–∞“õ in (next_question):", q);
      io.emit("next_question_data", {
        text: q.text,
        answers: q.options,
        correctIndex: q.correctIndex,
        number: currentQuestionIndex + 1,
        motivation: q.motivation,
      });
    } else {
      console.log("‚úÖ –ë–∞—Ä–ª—ã“õ —Å“±—Ä–∞“õ—Ç–∞—Ä –∞—è“õ—Ç–∞–ª–¥—ã");
      io.emit("quiz_finished");
    }
  });
});

// ---------------------------
