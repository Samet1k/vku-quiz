const Player = require("../models/Player");
const Question = require("../models/Question");
const redisClient = require("../utils/redisClient");

function socketHandler(io, socket) {
  let gameStartTime = null; // –¢–∞–π–º–µ—Ä–¥—ñ —Å–∞“õ—Ç–∞—É “Ø—à—ñ–Ω –∞–π–Ω—ã–º–∞–ª—ã

  socket.emit("message", "–°—ñ–∑ —Å–µ—Ä–≤–µ—Ä–º–µ–Ω —Å”ô—Ç—Ç—ñ “õ–æ—Å—ã–ª–¥—ã“£—ã–∑!");
  console.log("üîå “ö–∞—Ç—ã—Å—É—à—ã “õ–æ—Å—ã–ª–¥—ã:", socket.id);

  const ROOM_CODE = "1952";

  socket.on("join_game", async ({ nickname, promoCode }) => {
    const gameActive = await redisClient.get("gameActive");
    if (gameActive !== "true") {
      socket.emit("game_not_started");
      return;
    }

    if (promoCode !== ROOM_CODE) {
      socket.emit("invalid_promo");
      return;
    }

    const allPlayers = await redisClient.hKeys("players");
    await redisClient.hSet("players", nickname, socket.id); // üëâ –æ–π—ã–Ω—à—ã–Ω—ã Redis —ñ—à—ñ–Ω–µ “õ–æ—Å–∞–º—ã–∑

    if (allPlayers.includes(nickname)) {
      socket.emit("nickname_taken");
      return;
    }

    socket.join(promoCode);
    console.log(`${nickname} –±”©–ª–º–µ–≥–µ “õ–æ—Å—ã–ª–¥—ã! (${socket.id})`);

    await redisClient.set(`socket:${socket.id}`, nickname);

    // –û–π—ã–Ω—à—ã —Å–∞–Ω—ã–Ω –µ—Å–µ–ø—Ç–µ—É –∂”ô–Ω–µ Redis-—Ç–µ –∂–∞“£–∞—Ä—Ç—É
    const playersMap = await redisClient.hGetAll("players");
    const playerCount = Object.keys(playersMap).length; // –î“±—Ä—ã—Å –µ—Å–µ–ø—Ç–µ—É
    await redisClient.set("playerCount", playerCount); // –ñ–∞“£–∞—Ä—Ç—É
    io.emit("update_player_count", playerCount); // –ö–ª–∏–µ–Ω—Ç–∫–µ –∂–∞“£–∞—Ä—Ç—ã–ª“ì–∞–Ω —Å–∞–Ω–¥—ã –∂—ñ–±–µ—Ä—É
    socket.emit("join_success", {
      nickname,
      socketId: socket.id,
    });
  });

  socket.on("disconnect", async () => {
    try {
      const nickname = await redisClient.get(`socket:${socket.id}`);
      if (nickname) {
        await redisClient.hDel("players", nickname);
        await redisClient.del(`socket:${socket.id}`);

        // –û–π—ã–Ω—à—ã–ª–∞—Ä —Å–∞–Ω—ã–Ω “õ–∞–π—Ç–∞ –µ—Å–µ–ø—Ç–µ—É
        const allPlayers = await redisClient.hGetAll("players");
        const playerCount = Object.keys(allPlayers).length; // –û–π—ã–Ω—à—ã–ª–∞—Ä —Å–∞–Ω—ã–Ω “õ–∞–π—Ç–∞ –µ—Å–µ–ø—Ç–µ—É
        await redisClient.set("playerCount", playerCount); // Redis-—Ç–µ –∂–∞“£–∞—Ä—Ç—É
        io.emit("update_player_count", playerCount); // –û–π—ã–Ω—à—ã —Å–∞–Ω—ã–Ω –∫–ª–∏–µ–Ω—Ç–∫–µ –∂—ñ–±–µ—Ä—É
        console.log(`‚ùå “ö–∞—Ç—ã—Å—É—à—ã —à—ã“õ—Ç—ã: ${nickname}`);
      }
    } catch (error) {
      console.error("‚ùå disconnect “õ–∞—Ç–µ—Å—ñ:", error);
    }
  });

  socket.on("reconnect_player", async ({ nickname }) => {
    try {
      const playerData = await redisClient.hGet("players", nickname);
      if (!playerData) return;

      const parsed = JSON.parse(playerData);
      parsed.socketId = socket.id;

      await redisClient.hSet("players", nickname, JSON.stringify(parsed));
      await redisClient.set(`socket:${socket.id}`, nickname);

      playerSockets.set(nickname, socket.id);

      // –û–π—ã–Ω—à—ã–ª–∞—Ä–¥—ã“£ —Å–∞–Ω—ã–Ω –∂–∞“£–∞—Ä—Ç—É
      const playersMap = await redisClient.hGetAll("players");
      const playerCount = Object.keys(playersMap).length;
      await redisClient.set("playerCount", playerCount); // –¢–µ–∫ –±—ñ—Ä —Ä–µ—Ç –∂–∞“£–∞—Ä—Ç—É
      io.emit("update_player_count", playerCount); // –ñ–∞“£–∞—Ä—Ç—ã–ª“ì–∞–Ω —Å–∞–Ω–¥—ã –∫–ª–∏–µ–Ω—Ç–∫–µ –∂—ñ–±–µ—Ä—É

      console.log(`üîÑ –û–π—ã–Ω—à—ã “õ–∞–π—Ç–∞ “õ–æ—Å—ã–ª–¥—ã: ${nickname}`);
    } catch (error) {
      console.error("‚ùå reconnect_player “õ–∞—Ç–µ—Å—ñ:", error);
    }
  });

  socket.on("create_game", async () => {
    try {
      // Redis-—Ç–µ –±–∞—Ä–ª—ã“õ –æ–π—ã–Ω –¥–µ—Ä–µ–∫—Ç–µ—Ä—ñ–Ω ”©—à—ñ—Ä—É
      await redisClient.del("players"); // –û–π—ã–Ω—à—ã–ª–∞—Ä–¥—ã —Ç–∞–∑–∞–ª–∞—É
      await redisClient.del("playerCount"); // –û–π—ã–Ω—à—ã–ª–∞—Ä —Å–∞–Ω—ã
      await redisClient.del("leaderboard"); // –õ–∏–¥–µ—Ä–±–æ—Ä–¥
      await redisClient.del("questions"); // –°“±—Ä–∞“õ—Ç–∞—Ä
      await redisClient.del("correctAnswers"); // –î“±—Ä—ã—Å –∂–∞—É–∞–ø—Ç–∞—Ä
      await redisClient.del("currentQuestionIndex"); // “ö–∞–∑—ñ—Ä–≥—ñ —Å“±—Ä–∞“õ—Ç—ã“£ –∏–Ω–¥–µ–∫—Å—ñ
      await redisClient.del("selectionOrder"); // –¢–∞“£–¥–∞—É —Ä–µ—Ç—ñ–Ω —Å–∞“õ—Ç–∞—É

      // –ë–∞–∑–∞–¥–∞–Ω –æ–π—ã–Ω—à—ã–ª–∞—Ä–¥—ã ”©—à—ñ—Ä—É
      await Player.deleteMany();
      console.log("üßπ –ë–∞—Ä–ª—ã“õ –µ—Å–∫—ñ –¥–µ—Ä–µ–∫—Ç–µ—Ä Redis-—Ç–µ –∂”ô–Ω–µ –±–∞–∑–∞–¥–∞ —Ç–∞–∑–∞–ª–∞–Ω–¥—ã");

      // –ñ–∞“£–∞ –æ–π—ã–Ω –±–∞—Å—Ç–∞—É
      await redisClient.set("gameActive", "true");

      await redisClient.set("count", 0); // –û–π—ã–Ω—à—ã —Å–∞–Ω—ã
      io.emit("update_player_count", 0); // –ö–ª–∏–µ–Ω—Ç—Ç–µ—Ä–≥–µ –æ–π—ã–Ω—à—ã–ª–∞—Ä —Å–∞–Ω—ã

      console.log("üéÆ –ñ–∞“£–∞ –æ–π—ã–Ω “õ“±—Ä—ã–ª–¥—ã");
    } catch (error) {
      console.error("‚ùå create_game “õ–∞—Ç–µ—Å—ñ:", error);
    }
  });

  socket.on("start_game", async () => {
    gameStartTime = Date.now(); // –°–µ—Ä–≤–µ—Ä–¥—ñ“£ –Ω–∞“õ—Ç—ã —É–∞“õ—ã—Ç—ã
    io.emit("game_started", { startTime: gameStartTime }); // –ë–∞—Ä–ª—ã“õ –æ–π—ã–Ω—à—ã–ª–∞—Ä“ì–∞ —Å–µ—Ä–≤–µ—Ä —É–∞“õ—ã—Ç—ã–Ω –∂—ñ–±–µ—Ä–µ–º—ñ–∑
    console.log(`–û–π—ã–Ω –±–∞—Å—Ç–∞–ª–¥—ã. –°–µ—Ä–≤–µ—Ä —É–∞“õ—ã—Ç—ã: ${gameStartTime}`);

    // –û–π—ã–Ω —Å“±—Ä–∞“õ—Ç–∞—Ä—ã–Ω –∂—ñ–±–µ—Ä—É
    let cachedQuestions = await redisClient.get("questions");
    if (!cachedQuestions) {
      currentQuestions = await Question.find().sort({ question_number: 1 });
      await redisClient.set("questions", JSON.stringify(currentQuestions), {
        EX: 60 * 5,
      });
    } else {
      currentQuestions = JSON.parse(cachedQuestions);
    }

    // –û–π—ã–Ω–Ω—ã“£ –±—ñ—Ä—ñ–Ω—à—ñ —Å“±—Ä–∞“ì—ã–Ω –∫”©—Ä—Å–µ—Ç—É
    const firstQuestionIndex = 0;
    await redisClient.set("currentQuestionIndex", firstQuestionIndex);
    io.emit("game_started", { startTime: gameStartTime });
    setTimeout(() => {
      sendCurrentQuestion(); // –ê–ª“ì–∞—à“õ—ã —Å“±—Ä–∞“õ—Ç—ã –∂—ñ–±–µ—Ä—É
    }, 2000);
  });

  socket.on(
    "submit_answer",
    async ({ nickname, selectedIndex, questionNumber }) => {
      try {
        // –û–π—ã–Ω—à—ã–Ω—ã“£ –∂–∞—É–∞–ø –±–µ—Ä—É —É–∞“õ—ã—Ç—ã —Ç–µ–∫ —Å–µ—Ä–≤–µ—Ä —É–∞“õ—ã—Ç—ã–Ω–∞ –Ω–µ–≥—ñ–∑–¥–µ–ª–µ–¥—ñ
        const timestamp = Date.now() - gameStartTime; // –°–µ—Ä–≤–µ—Ä —É–∞“õ—ã—Ç—ã
        console.log(`${nickname} –∂–∞—É–∞–ø –±–µ—Ä–¥—ñ. –£–∞“õ—ã—Ç—ã: ${timestamp} –º—Å`);

        // –°“±—Ä–∞“õ—Ç—ã –∞–ª—É
        const number = Number(questionNumber) + 1;
        const currentQuestion = await Question.findOne({
          question_number: number,
        });
        if (!currentQuestion) {
          console.warn("‚ùå –°“±—Ä–∞“õ —Ç–∞–±—ã–ª–º–∞–¥—ã:", number);
          return;
        }

        const userAnswer = Number(selectedIndex);
        const correctAnswer = Number(currentQuestion.correctIndex);
        const isCorrect = userAnswer === correctAnswer;

        // “ö–∞—Ç–µ –∂–∞—É–∞–ø –±–æ–ª—Å–∞, –±–∞–ª–ª –±–µ—Ä—ñ–ª–º–µ–π–¥—ñ
        if (!isCorrect) {
          console.log(`${nickname} “õ–∞—Ç–µ –∂–∞—É–∞–ø –±–µ—Ä–¥—ñ, –±–∞–ª–ª –±–µ—Ä—ñ–ª–º–µ–π–¥—ñ.`);
          return; // –ë–∞–ª–ª –±–µ—Ä–º–µ—É
        }

        console.log("üì© –ñ–∞—É–∞–ø “õ–∞–±—ã–ª–¥–∞–Ω–¥—ã:", {
          nickname,
          selectedIndex,
          correctIndex: currentQuestion.correctIndex,
          isCorrect,
          timestamp,
        });

        // –û–π—ã–Ω—à—ã–Ω—ã“£ —É–∞“õ—ã—Ç—ã–Ω –∂”ô–Ω–µ –∂–∞—É–∞–ø –±–µ—Ä–≥–µ–Ω —É–∞“õ—ã—Ç—ã–Ω —Å–∞“õ—Ç–∞—É
        await redisClient.rPush(
          "correctAnswers",
          JSON.stringify({ nickname, timestamp })
        );

        // –¢–∞“£–¥–∞—É —Ä–µ—Ç—ñ–Ω —Å–∞“õ—Ç–∞—É
        await handlePlayerSelection(socket, nickname, questionNumber);

        // –ë–∞—Ä–ª—ã“õ –æ–π—ã–Ω—à—ã–ª–∞—Ä –∂–∞—É–∞–ø –±–µ—Ä–≥–µ–Ω —Å–æ“£ –±–∞–ª–ª–¥–∞—Ä–¥—ã –µ—Å–µ–ø—Ç–µ—É
        const playersAnswered = await redisClient.lRange(
          "correctAnswers",
          0,
          -1
        );
        const playerCount = await redisClient.hLen("players");

        if (playersAnswered.length === playerCount) {
          await processAnswers(questionNumber);
        }
      } catch (error) {
        console.error("‚ùå submit_answer “õ–∞—Ç–µ—Å—ñ:", error);
      }
    }
  );

  async function handlePlayerSelection(socket, nickname, questionNumber) {
    const playerSelectionOrder = await redisClient.get(
      `selectionOrder:${questionNumber}`
    );

    const order = playerSelectionOrder ? JSON.parse(playerSelectionOrder) : [];

    // –û–π—ã–Ω—à—ã–Ω—ã“£ –Ω–∏–∫–Ω–µ–π–º—ñ–Ω –∂”ô–Ω–µ —É–∞“õ—ã—Ç—ã–Ω —Ç—ñ–∑—ñ–º–≥–µ “õ–æ—Å–∞–º—ã–∑
    order.push({ nickname, timestamp: Date.now() - gameStartTime }); // –°–µ—Ä–≤–µ—Ä —É–∞“õ—ã—Ç—ã –±–æ–π—ã–Ω—à–∞ —Å–∞–ª—ã—Å—Ç—ã—Ä—É

    // –†–µ—Ç –±–æ–π—ã–Ω—à–∞ —Å“±—Ä—ã–ø—Ç–∞–π–º—ã–∑: –±—ñ—Ä—ñ–Ω—à—ñ –∂–∞—É–∞–ø –±–µ—Ä–≥–µ–Ω–¥–µ—Ä –∞–ª–¥—ã–º–µ–Ω
    order.sort((a, b) => a.timestamp - b.timestamp);

    // –¢—ñ–∑—ñ–º–¥—ñ Redis-–∫–µ —Å–∞“õ—Ç–∞–π–º—ã–∑
    await redisClient.set(
      `selectionOrder:${questionNumber}`,
      JSON.stringify(order)
    );
  }

  async function processAnswers(questionNumber) {
    const playerSelectionOrder = await redisClient.get(
      `selectionOrder:${questionNumber}`
    );

    if (!playerSelectionOrder) {
      console.log("–†–µ—Ç—Ç–µ–ª–≥–µ–Ω —Ç—ñ–∑—ñ–º –∂–æ“õ!");
      return;
    }

    const order = JSON.parse(playerSelectionOrder);

    // “ö–∞—Ç–µ –∂–∞—É–∞–ø –±–µ—Ä–≥–µ–Ω–¥–µ—Ä–¥—ñ –∞–ª—ã–ø —Ç–∞—Å—Ç–∞—É
    const correctAnswers = await redisClient.lRange(
      `correctAnswers:${questionNumber}`,
      0,
      -1
    );

    const correctNicknames = correctAnswers.map(
      (answer) => JSON.parse(answer).nickname
    );

    // –¢–µ–∫ –¥“±—Ä—ã—Å –∂–∞—É–∞–ø –±–µ—Ä–≥–µ–Ω–¥–µ—Ä–¥—ñ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è–ª–∞—É
    const filteredOrder = order.filter((item) =>
      correctNicknames.includes(item.nickname)
    );

    // –î“±—Ä—ã—Å –∂–∞—É–∞–ø –±–µ—Ä–≥–µ–Ω–¥–µ—Ä–≥–µ –±–∞–ª–ª –±–µ—Ä—É
    let baseScore = 5000;
    for (let i = 0; i < filteredOrder.length; i++) {
      const { nickname } = filteredOrder[i];
      let scoreToAdd = baseScore - i * 3; // –ë–∞–ª–ª–¥—ã —Å“±—Ä—ã–ø—Ç–∞—É –±–æ–π—ã–Ω—à–∞ –µ—Å–µ–ø—Ç–µ—É
      if (scoreToAdd < 1000) scoreToAdd = 1000; // –ë–∞–ª–ª –º–∏–Ω–∏–º—É–º—ã

      // –û–π—ã–Ω—à—ã“ì–∞ –±–∞–ª–ª –±–µ—Ä—É
      await redisClient.zIncrBy("leaderboard", scoreToAdd, nickname);

      const redisPlayer = await redisClient.hGet("players", nickname);
      if (redisPlayer) {
        const parsed = JSON.parse(redisPlayer);
        const newScore = (parsed.score || 0) + scoreToAdd;

        await redisClient.hSet(
          "players",
          nickname,
          JSON.stringify({ socketId: parsed.socketId, score: newScore })
        );

        const socketId = parsed.socketId;
        if (socketId) {
          io.to(socketId).emit("score_update", { added: scoreToAdd });
        }
      }
    }

    // –û–π—ã–Ω—à—ã–ª–∞—Ä–¥—ã“£ —Å–∞–Ω—ã–Ω –∂–∞“£–∞—Ä—Ç—É
    const playerCount = filteredOrder.length;
    await redisClient.set("playerCount", playerCount);
    io.emit("update_player_count", playerCount);
  }

  async function sendCurrentQuestion() {
    const currentQuestionIndex = parseInt(
      (await redisClient.get("currentQuestionIndex")) || "0"
    );
    const cachedQuestions = await redisClient.get("questions");
    if (!cachedQuestions) return;

    const currentQuestions = JSON.parse(cachedQuestions);
    const q = currentQuestions[currentQuestionIndex];

    if (!q) {
      console.error("–°“±—Ä–∞“õ —Ç–∞–±—ã–ª–º–∞–¥—ã. –ò–Ω–¥–µ–∫—Å:", currentQuestionIndex);
      return;
    }

    io.emit("question_quiz", {
      text: q.text,
      answers: q.options,
      correctIndex: q.correctIndex,
      number: currentQuestionIndex + 1,
      motivation: q.motivation,
    });
  }

  socket.on("next_question", async () => {
    try {
      const rawAnswers = await redisClient.lRange("correctAnswers", 0, -1);
      const correctAnswers = rawAnswers.map((str) => JSON.parse(str));
      correctAnswers.sort((a, b) => a.timestamp - b.timestamp);

      let baseScore = 5000;
      for (let i = 0; i < correctAnswers.length; i++) {
        const { nickname } = correctAnswers[i];
        let scoreToAdd = baseScore - i * 3;
        if (scoreToAdd < 1000) scoreToAdd = 1000;

        await redisClient.zIncrBy("leaderboard", scoreToAdd, nickname);

        const redisPlayer = await redisClient.hGet("players", nickname);
        if (redisPlayer) {
          const parsed = JSON.parse(redisPlayer);
          const newScore = (parsed.score || 0) + scoreToAdd;

          await redisClient.hSet(
            "players",
            nickname,
            JSON.stringify({ socketId: parsed.socketId, score: newScore })
          );

          const socketId = parsed.socketId;
          if (socketId) {
            io.to(socketId).emit("score_update", { added: scoreToAdd });
          }
        }
      }

      await redisClient.del("correctAnswers");

      let currentQuestionIndex = parseInt(
        (await redisClient.get("currentQuestionIndex")) || "0"
      );
      currentQuestionIndex += 1;
      await redisClient.set("currentQuestionIndex", currentQuestionIndex);

      const cachedQuestions = await redisClient.get("questions");
      if (!cachedQuestions) return;

      const currentQuestions = JSON.parse(cachedQuestions);

      if (currentQuestionIndex < currentQuestions.length) {
        const q = currentQuestions[currentQuestionIndex];
        io.emit("next_question_data", {
          text: q.text,
          answers: q.options,
          correctIndex: q.correctIndex,
          number: currentQuestionIndex + 1,
          motivation: q.motivation,
          startTime: Date.now(), // –°–µ—Ä–≤–µ—Ä —É–∞“õ—ã—Ç—ã–Ω –∂—ñ–±–µ—Ä–µ–º—ñ–∑
        });
      } else {
        console.log("‚úÖ –ë–∞—Ä–ª—ã“õ —Å“±—Ä–∞“õ—Ç–∞—Ä –∞—è“õ—Ç–∞–ª–¥—ã");

        const allPlayers = await redisClient.hGetAll("players");
        const scores = await redisClient.zRangeWithScores(
          "leaderboard",
          0,
          -1,
          { REV: true }
        );

        console.log("üßæ Redis-—Ç–µ–Ω –∞–ª—ã–Ω“ì–∞–Ω leaderboard:", scores);
        console.log("üîç allPlayers map:", allPlayers);

        for (const entry of scores) {
          const nickname = entry.value;
          const score = entry.score;
          let socketId = "";
          const redisPlayerStr = await redisClient.hGet("players", nickname);
          if (redisPlayerStr) {
            try {
              const redisPlayer = JSON.parse(redisPlayerStr);
              socketId = redisPlayer.socketId || "";
            } catch (err) {
              console.error("‚ùå JSON parse error:", nickname, err);
            }
          }

          console.log("üíæ MongoDB-–≥–µ –∂–∞–∑—ã–ø –∂–∞—Ç—ã—Ä:", nickname, score, socketId);

          await Player.findOneAndUpdate(
            { nickname },
            { $set: { score, socketId } },
            { upsert: true }
          );
        }

        await redisClient.del("leaderboard");

        io.emit("quiz_finished");
      }
    } catch (error) {
      console.error("‚ùå next_question “õ–∞—Ç–µ—Å—ñ:", error);
    }
  });

  socket.on("end_game", async () => {
    try {
      gameActive = false;
      await redisClient.set("count", 0);
      await redisClient.set("gameActive", "false"); // –û–π—ã–Ω –∞—è“õ—Ç–∞–ª–¥—ã
      io.emit("update_player_count", 0);

      console.log("üèÅ –û–π—ã–Ω –∞—è“õ—Ç–∞–ª–¥—ã");
    } catch (error) {
      console.error("‚ùå end_game “õ–∞—Ç–µ—Å—ñ:", error);
    }
  });

  socket.on("show_motivation", () => {
    socket.broadcast.emit("show_motivation");
  });
}

module.exports = socketHandler;
